exp(-1/2 * (obs - mu)^2/(sigma^2)))
}
return(loglike)
}
# Example, log-likelihood of data if mu=120 and sigma=20
loglike(diams, 122, 20)
# Let's try some combinations of parameters and
# plot the results
params = expand.grid(mu = seq(50, 200, 1),
sigma = seq(10, 40, 1))
params$logL = with(params, loglike(diams, mu, sigma))
summary(params)
library(lattice)
contourplot(logL ~ mu*sigma, data = params, cuts = 20)
like(diams, 120, 20)
n<-10
mu<-0
sigma<-1
rnorm(n, mean = mu, sd = sigma)
n<-10
mu<-0
sigma<-1
norm_dara=rnorm(100, mean = mu, sd = sigma)
n<-10
mu<-0
sigma<-1
norm_data=rnorm(100, mean = mu, sd = sigma)
norm_data
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
n<-10
mu<-0
sigma<-1
norm_data=rnorm(100, mean = mu, sd = sigma)
ggplot(data=norm_data, aes(norm_data)) + geom_histogram()
histogram(norm_data)
hist(norm_data,
main="Histogram for Air Passengers",
xlab="Passengers",
border="blue",
col="green",
xlim=c(100,700),
las=1,
breaks=5)
hist(norm_data,
main="Histogram for Air Passengers",
xlab="Passengers",
border="blue",
col="green",
xlim=c(-3,3),
las=1,
breaks=5)
hist(norm_data,
main="Histogram for Air Passengers",
xlab="Passengers",
border="blue",
col="green",
xlim=c(-3,3),
las=1,
breaks=1)
hist(norm_data,
main="Histogram for Air Passengers",
xlab="Passengers",
border="blue",
col="green",
xlim=c(-3,3),
las=1,
breaks=50)
hist(norm_data,
main="Histogram of a Normal Distribution $LaTeX$",
xlab="Passengers",
border="blue",
col="green",
xlim=c(-3,3),
las=1,
breaks=50)
hist(norm_data,
main="Histogram of a Normal Distribution ",
xlab="X value",
border="black",
col="white",
xlim=c(-3,3),
las=1,
breaks=50)
n<-10
mu<-0
sigma<-1
norm_data=rnorm(100, mean = mu, sd = sigma)
hist(norm_data,
main="Histogram of a Normal Distribution ",
xlab="X value",
border="black",
col="white",
xlim=c(-3,3),
las=3,
breaks=50)
hist(norm_data,
main="Histogram of a Normal Distribution ",
xlab="X value",
border="black",
col="white",
xlim=c(-3,3),
las=1,
breaks=50)
set.seed(777)
n<-10
mu<-0
sigma<-1
norm_data=rnorm(100, mean = mu, sd = sigma)
hist(norm_data,
main="Histogram of a Normal Distribution ",
xlab="Value of X",
border="black",
col="white",
xlim=c(-3,3),
las=1,
breaks=50)
set.seed(777)
n<-10
mu<-0
sigma<-1
norm_data=rnorm(100, mean = mu, sd = sigma)
hist(norm_data,
main="Histogram of a Normal Distribution ",
xlab="Value of X",
border="black",
col="white",
xlim=c(-3,3),
las=1,
breaks=50)
likelihood = function(data, mu, sigma) {
likelihood = 1
for(obs in data){
likelihood = likelihood * 1/(sqrt(2*pi)*sigma) * exp(-1/2 * (obs - mu)^2/(sigma^2))
}
return(likelihood)
}
likelihood(norm_data, 120, 20)
```
likelihood(norm_data, 0, 1)
```
likelihood(norm_data, 0, 1)
for(obs in data){
loglikelihood = loglikelihood +  log(1/(sqrt(2*pi)*sigma) * exp(-1/2 * (obs - mu)^2/(sigma^2)))
}
``` {r loglikelihood}
loglike = loglike +
log(1/(sqrt(2*pi)*sigma) *
exp(-1/2 * (obs - mu)^2/(sigma^2)))
likelihood = function(data, mu, sigma) {
likelihood = 1
for(obs in data){
likelihood = likelihood * (1/(sqrt(2*pi)*sigma)) * exp((-1/2) * ((obs - mu)^2)/(sigma^2))
}
return(likelihood)
}
likelihood(norm_data, 0, 1)
likelihood(norm_data, 0, 1)
likelihood(norm_data, 0, 1)
likelihood(norm_data, 0, 1)
loglike = function(data, mu, sigma) {
loglike = 0
for(obs in data){
loglike = loglike + (-1/2)*log(2*pi*sigma*sigma) - ((obs - mu)^(2))/(2*sigma*sigma)
}
return(loglike)
}
like_norm<-likelihood(norm_data, 0, 1)
square_sum <-   for(obs in data){
(obs - mu)^2
}
square_sum = function(data,mu,sigma)
square_sum = 0
for(obs in data){
square_sum = square_sum + ((obs - mu)^2)/(sigma^2)
}
square_sum = function(data,mu,sigma){
square_sum = 0
for(obs in data){
square_sum = square_sum + ((obs - mu)^2)/(sigma^2)
}
return(square_sum)
}
like_close_form<- (2*pi*sigma*sigma)^{n}*exp(-square_sum(norm_data,0,1))
square_sum = function(data,mu,sigma){
square_sum = 0
for(obs in data){
square_sum = square_sum + ((obs - mu)^2)/(sigma^2)
}
return(square_sum)
}
like_close_form<- (2*pi*sigma*sigma)^{n}*exp(-square_sum(norm_data,0,1))
like_close_form
like_norm<-likelihood(norm_data, 0, 1)
like_norm
square_sum = function(data,mu,sigma){
square_sum = 0
for(obs in data){
square_sum = square_sum + ((obs - mu)^2)/(2*sigma^2)
}
return(square_sum)
}
like_close_form<- (2*pi*sigma*sigma)^{n}*exp(-square_sum(norm_data,0,1))
like_close_form
square_sum = function(data,mu){
square_sum = 0
for(obs in data){
square_sum = square_sum + ((obs - mu)^2)
}
return(square_sum)
}
like_close_form<- (2*pi*sigma*sigma)^{n}*exp((-square_sum(norm_data,0))/(2*sigma^{2})  )
like_close_form
square_sum = function(data,mu){
square_sum = 0
for(obs in data){
square_sum = square_sum + ((obs - mu)^2)
}
return(square_sum)
}
like_close_form<- ((sqrt(2*pi*sigma*sigma))^{n})*exp((-square_sum(norm_data,0))/(2*sigma^{2})  )
like_close_form
square_sum = function(data,mu){
square_sum = 0
for(obs in data){
square_sum = square_sum + ((obs - mu)^2)
}
return(square_sum)
}
like_close_form<- (1/(sqrt(2*pi*sigma*sigma))^{n})*exp((-square_sum(norm_data,0))/(2*sigma^{2})  )
like_close_form
square_sum = function(data,mu){
square_sum = 0
for(obs in data){
square_sum = square_sum + ((obs - mu)^2)
}
return(square_sum)
}
n<-100
mu<-0
sigma<-1
like_close_form<- (1/(sqrt(2*pi*sigma*sigma))^{n})*exp((-square_sum(norm_data,0))/(2*sigma^{2})  )
like_close_form
params = expand.grid(mu = seq(50, 200, 1),
sigma = seq(10, 40, 1))
View(params)
View(params)
params = expand.grid(mu = seq(-4, 4, 0.1),
sigma = seq(-1, 3, 0.1))
View(params)
View(params)
params$logL = with(params, loglike_norm(norm_data, mu, sigma))
params = expand.grid(mu = seq(-4, 4, 0.1),
sigma = seq(-1, 3, 0.1))
params$logL = with(params, loglikelihood(norm_data, mu, sigma))
loglikelihood = function(data, mu, sigma) {
loglikelihood = 0
for(obs in data){
loglikelihood = loglikelihood + (-1/2)*log(2*pi*sigma*sigma) - ((obs - mu)^(2))/(2*sigma*sigma)
}
return(loglikelihood)
}
params = expand.grid(mu = seq(-4, 4, 0.1),
sigma = seq(-1, 3, 0.1))
params$logL = with(params, loglikelihood(norm_data, mu, sigma))
summary(params)
library(lattice)
contourplot(logL ~ mu*sigma, data = params, cuts = 20)
library(lattice)
contourplot(logL ~ mu*sigma, data = params, cuts = 200)
contourplot(logL ~ mu*sigma, data = params, cuts = 5)
params = expand.grid(mu = seq(-4, 4, 0.1),
sigma = seq(-1, 3, 0.1))
params$logL = with(params, loglikelihood(norm_data, mu, sigma))
summary(params)
library(lattice)
contourplot(logL ~ mu*sigma, data = params, cuts = 50)
params = expand.grid(mu = seq(-4, 4, 0.1),
sigma = seq(-1, 3, 0.1))
params$logL = with(params, loglikelihood(norm_data, mu, sigma))
summary(params)
library(lattice)
contourplot(logL ~ mu*sigma, data = params, cuts = 20)
params = expand.grid(mu = seq(-1, 1, 0.1),
sigma = seq(0, 2, 0.1))
params$logL = with(params, loglikelihood(norm_data, mu, sigma))
summary(params)
library(lattice)
contourplot(logL ~ mu*sigma, data = params, cuts = 10)
set.seed(777)
n<-10
mu<-0
sigma<-1
norm_data=rnorm(100, mean = mu, sd = sigma)
hist(norm_data,
main="Histogram of a Normal Distribution ",
xlab="Value of X",
border="black",
col="white",
xlim=c(-3,3),
las=1,
breaks=50)
newton <- function(f, tol = 1e-7, x0 = 1, N = 100){
h <- 1e-7
i <- 1; x1 = x0
p <- numeric(N)
while (i <= N) {
df.dx <- (f(x0 + h) - f(x0)) / h
x1 <- (x0 - (f(x0) / df.dx))
p[i] <- x1
i <- i + 1
if (abs(x1 - x0) < tol) break
x0 <- x1
}
return(p[1 : (i-1)])
}
newton <- function(f, tol = 1e-7, x0 = 1, N = 100){
h <- 1e-7
i <- 1; x1 = x0
p <- numeric(N)
while (i <= N) {
df.dx <- (f(x0 + h) - f(x0)) / h
x1 <- (x0 - (f(x0) / df.dx))
p[i] <- x1
i <- i + 1
if (abs(x1 - x0) < tol) break
x0 <- x1
}
return(p[1 : (i-1)])
}
f <- function(x){x^5 - 7}
h <- 1e - 7
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
View(df.dx)
View(df.dx)
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
(app[length(app)])
f <- function(x){x^5 - 7}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
f(app[length(app)])
7^{(1/2)}
{(1/5)}
7^{(1/5)}
f <- function(x){x^5 - 7}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
f(app[length(app)]) #almost zero
f <- function(x){(1/(sqrt(2*pi*sigma*sigma)))*exp((-(x-mu)^{2})/(2*sigma^{2})  )}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
f(app[length(app)]) #almost zero
mu<-1
sigma<-1
f <- function(x){(1/(sqrt(2*pi*sigma*sigma)))*exp((-(x-mu)^{2})/(2*sigma^{2})  )}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
mu<-1
sigma<-1
f <- function(x){(1/(sqrt(2*pi*sigma*sigma)))*exp((-(x-mu)^{2})/(2*sigma^{2})  )}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
mu<-1
sigma<-1
f <- function(x){(1/(sqrt(2*pi*sigma*sigma)))*exp((-(x-mu)^{2})/(2*sigma^{2})  )}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
mu<-1
sigma<-1
f <- function(x){(1/(sqrt(2*pi*sigma*sigma))^{n})*exp((-square_sum(norm_data,0))/(2*sigma^{2})  )}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
mu<-1
sigma<-1
n<-100
f <- function(x){(1/(sqrt(2*pi*sigma*sigma))^{n})*exp((-square_sum(norm_data,0))/(2*sigma^{2})  )}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
mu<-1
sigma<-1
n<-100
f <- function(x){(1/(sqrt(2*pi*sigma*sigma))^{n})*exp((-square_sum(norm_data,0))/(2*sigma^{2})  )}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(0.01);df.dx(0.03)
app <- newton(f, x0 = 2)
df.dx <- function(x){(f(x + h) - f(x)) / h}
View(square_sum)
View(square_sum)
df.dx(1);df.dx(10)
f <- function(x){(1/(sqrt(2*pi*sigma*sigma))^{n})*exp((-square_sum(norm_data,0))/(2*sigma^{2}))}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(10)
mu<-1
sigma<-1
f <- function(x){(1/(sqrt(2*pi*sigma*sigma)))*exp((-(x-mu)^{2})/(2*sigma^{2})  )}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
f <- function(x){x^5 - 7}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
f(app[length(app)]) #almost zero
mu<-1
sigma<-1
f <- function(x){(1/(sqrt(2*pi*sigma*sigma)))*exp((-(x-mu)^{2})/(2*sigma^{2})  )}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
mu<-1
sigma<-1
n<-100
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(10)
app <- newton(like_norm(norm_data,0,1), x0 = 2)
View(loglikelihood)
View(loglikelihood)
mu<-1
sigma<-1
n<-100
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(10)
app <- newton(loglikelihood(norm_data,0,1), x0 = 2)
app
length(app)
app[length(app)]
df.dx(1);df.dx(2)
mu<-1
sigma<-1
n<-100
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(loglikelihood(norm_data,0,1), x0 = 2)
app
length(app)
app[length(app)]
library(nlme)
m1 = gls(diams ~ 1, method='ML')
summary(m1)
library(nlme)
m1 = gls(norm_data ~ 1, method='ML')
summary(m1)
library(nlme)
m1 = gls(norm_data ~ 1, method='ML')
summary(m1)
mu<-1
sigma<-1
f <- function(x){(1/(sqrt(2*pi*sigma*sigma)))*exp((-(x-mu)^{2})/(2*sigma^{2})  )}
h <- 1e-7
df.dx <- function(x){(f(x + h) - f(x)) / h}
df.dx(1);df.dx(2)
app <- newton(f, x0 = 2)
app
length(app)
app[length(app)]
f(app[length(app)])
